course name:certified kubernetes admin course
tutor: mumshad mannambeth


would be good to do before:
kubernetes for absolute beginners


2. cluster architecture
---
cargo and control ships analogy


master node
--
- manage
- plan
- scheduler
- monitor nodes

worker nodes
--
host applications as containers


master node consists of
--
- etcd :: key-value format db
- kube-apiserver :: orchestrator
- kube-scheduler :: how to deploy containers
- kube controller manager
  - node controller
  - replication controller


worker nodes consist of
--
- kubelet :: "the capetan"
- kube-proxy :: communication between services & containers inside of the cluster

container runtime service ( e.g. docker or rkt (rocket) )



3. & 4. etcd
---
- port: 2379
- stores / has the data about the cluster
(nodes, pods, configs, secrets, accounts, roles, bindings, others)


2 types of k8s cluster
--
- scratch
  - you have to install etcd-server by yourself
- kubeadm tool
  - deploys etcd-server as a pod in kube-system namespace
$ kubectl get pods -n kube-system


$ kubectl exec etcs-master -n kube-system
$ etcdctl get / --prefix -keys-only

- data is in the root directory
/registry/
- an then constructs such as
	- minions, pods, replicasets, deployments, roles, secrets


in HA environment
--
- there will be multiple master nodes in the cluster
- there will be multiple etcd instances spread across the master nodes
- etcd instancs shall know about each other
  - "--initial-cluster" option shall be specified



5. kube-apiserver
---
- kubectl <-reaches-the-> kube-apiserver (authorization/validation) <-retreaves-data-from-> etcd cluster
- kube-apiserver then authentizates and validates request


workflow example: create a pod (not using kubectl, but per APIs)
---
1] apiserver then creates a pod object without assigning it to a node
# curl -X POST /api/v1/namespaces/default/pods ...[other]
- the request is authenticated
- the request is validated
- the data is retrieved
- etcd is updated
- the user gets back the data


2] scheduler
- cont. monitors apiserver and realizes there is a new pod without a new node assigned
- updates kube-apiserver where to put the pod

3] kubeapi-server
- updates etcd-cluster
- passes the info to kubelet on the appropriate worker node

4] kubelet
- creates the pod on the worker node
- instructs the CRE (container runtime engine) to deploy app image
- updates status to kube-apiserver

5] kube-apiserver
updates data back into etcd cluster


kube-apiserver responsibilities are to:
--
1] authentcate user
2] validate request
3] retrieve data
4] update etcd (only component that talks to etcd is kube-apiserver)
5] scheduler
6] kubelet


kube-apiserver options
--
- eg. internesting are
  - certificates :: connectivity between different components (eg. ca.pem, kubernetes.pem, ..)
    - --etcd-catfile=..; --etcd-certfile=..; --etcd-keyfile=..;
  - location of etcd-servers
    - etcd-servers=..


- viewing kube-apiserver options
--
- depends on how you set up your cluster
  - if kubeadmin tool
    - then kube-apiserver-master deployed as a pod in -namespace kube-system @ master
    - the options could be seen in manifest file
      - /etc/kubernetes/manifests/kube-apiserver.yml
  - if no-kubeadmin setup
    - /etc/systemd/system/kube-apiserver.service
  - or list the process
    - on the master node
      - ps -aux | grep kube-apiserver



6. kube-controller-manager
---
- the role of controller process is to:
  - watch the status
  - remediate (correct, repair) situation

- controllers examples:
  - node-controller
    - node monitor period = 5 s
      - takes the state every 5 seconds)
    - node monitor grace period - 40 s
      - after heartbeat from node notreached, node marked as unreachable
    - pod eviction timeout = 5 min
      - if node deosn't come up, it is removed, another one is provisioned
  - replication-controller
    - monitors the state of replicaSets
    - ensuring the desired nr of pods available all the times within the set
  - deployment-controller
  - namespace-controller
  - endpoint-controller
  - job-controller
  - pv-protection-controller
  - pv-binder-controller
  - replication-controller
  - cronjob
  - stateful-set
  - replicaset


- installing kube-controll-manager
--
$ wget https://storage.googleapis.com/kubernetes-release/v1.13.0/bin/linux/amd64/kube-controller-manager
# run it as a service


- options are @ kube-controller-manager.service
  - abovementioned options are here
    - --node-monitor-period=5s
    - --node-monitor-grace-period=40s
    - --pod-eviction-timeout=5m0s
  - by default all controllers are enabled
  - if some of them are not, here is a good starting point to look at
    - -- controllers stringSlice

- view kube-controller-manager server options
--
1] kubeadmin setup:
- kubeadmin deploys kube controller manager
$ kubectl get pods -n kube-system
$ cat /etc/kubernetes/manifest/kube-controller-manager.yml

2] no-kubeadmin setup
$ cat /etc/systemd/system/kube-controller-manager.service
- or
$ ps aux | grep kube-controller-manager



7. kube-scheduler
---
- (only) decides which pod goes on which node
- kubelet :: actually places the pod on the node

- how it's done
--
1] filter nodes (e.g. that do not have enough CPUs)
2] rank nodes (ammount of resources after the pod is placed)
3] more requirements come later ..


- installing kube-scheduler
--
wget http://storage.googleapics.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kube-scheduler
# extract it and run it as a service


- viewing kube-scheduler options
--
$ cat /etc/kubernetes/manifests/kube-scheduler.yaml	# pod definition file
# kubeadm :: pod in kube-system namespace on the master node

$ ps -aux | grep kube-scheduler



8. kubelet
---
- is like captain of the worker node
1] registers the node with the k8s cluster
2] creates the pod (requests the CRE to pull the image and run an instance)
3] monitors node & pods


- installing kubelet
--
# kubeadm does not deploy kubelets
# kubelet has to be always manually installed on worker nodes
wget https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubelet

- viewing kubelet options
--
# listing the process on the worker node
ps -aux | grep kubelet



9. kube-proxy
---
- POD Network exists across all nodes

- kube-proxy
  - process that runs on each node
  - looks for new services
    - when service created
      - using iptables
      - creates rules on each node
      - to forward traffic from services to the backend pods


- installing kube-proxy
--
# download, extract it and run it as a service
$ wget https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kube-proxy

# kubeadm deploys kube-proxy as pod on each node
# it is deployd as a deamonset
$ kubectl get demonseat -n kube-system



10. pods
---
- the smallest k8s'object
- a single instance of an application
- pod encapsulates the deployed container

- scaling application happens via single container pods

- multi-container pods
--
- having hepler containers (supporting task for e.g. web app)
- all of them share
  - same network space (@ localhost)
  - same storage space


- installing (deploying) pods
--
$ kubectl run nginx --image nginx
# the command deploys a docker container by creating a pod

$ kubectl get pods
# list of pods in our cluster
























