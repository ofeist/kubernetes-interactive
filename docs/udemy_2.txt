Certification Details

Note!

In the video, I said the exam is 3 hours. With the latest version of the exam, it is now only 2 hours. The contents of this course have been updated with the changes required for the latest version of the exam.


Below are some references:

Certified Kubernetes Administrator: https://www.cncf.io/certification/cka/

Exam Curriculum (Topics): https://github.com/cncf/curriculum

Candidate Handbook: https://www.cncf.io/certification/candidate-handbook

Exam Tips: http://training.linuxfoundation.org/go//Important-Tips-CKA-CKAD


    Head over to this link to enroll in the Certification Exam. Remember to keep the code - 20KODE - handy to get a 20% discount while registering for the CKA exam with Linux Foundation.



---
https://killer.sh/pricing



---
Slack Group URL:
https://kodekloud.com/pages/community



---
We have created a repository with notes, links to documentation and answers to practice questions here. Please make sure to go through these as you progress through the course:

https://github.com/kodekloudhub/certified-kubernetes-administrator-course




2.11 cluster architecture
---

- master node:
    - etcd cluster
    - kube-apiserver
    - kube controller manager
    - kube-scheduler


- worker nodes
    - kubelet
    - kube-proxy
    - container runtime engine (docker/rkt/containerd)


- k8s | CRI (I = interface!)| container runtimes
    - container runtime interface

- dockershirm
    - pseudo interface developed from k8s only for docker



2.12. docker vs containerD
---
- containerd is enough
    - docker doesn't need to be installed

- ctr tool
    - only for debugging

- nerdctl (tool)
    - supports docker compose
    - supports newest features in containerd
        - encrypted images
        - lazy pulling
        - p2p image distribution
        - image signing & verifying
        - namespaces in k8s

- nerdctl commands analogue to docker commands
    - D -> docker run --name redis redis:alpine
    - N -> nerdctl run --name redis redis:alpine

    - D -> docker run --name webserver -p 80:80 -d nginx
    - N -> nerdctl run --name webserver -p 80:80 nginx


- crictl - CLI
    - used to interaction with CRI (container runtime interface)
    - for debugging and inspection
    - not user friendly

- to communicate with containerd you got to do api calls

- before (1.13 e.g.), for troubleshooting docker commands were used
    - now crictl (cry control) tool will be used

- commands
    - crictl
    - crictl pull busybox
    - crictl images
    - crictl ps -a
    - crictl exec -i -t 3e423421dd23424a4324ac42423 ls
    - crictl logs 3e953789dd8421ae943c24
    - crictl pods

- check the difference between docker and crictl commands
    - https://kubernetes.io/docs/reference/tools/map-crictl-dockercli/

- crictl --runtime-endpoint
- export CONTAINER_RUNTIME_ENDPOINT
- unix:///var/run/cri-docker.sock


2.13 etcd for beginners
---
./etcdctl --version

- run the spec version
    $ ETCDCTL_API=3 ./etcdctl version

- or specify for the session
    $ export ETCDCTL_API=3
    $ ./etcdctl version

- we work with version 3

$ export ETCDCTL_API=3
$ ./etcdctl put key1 value1

$ etcdctl get key1



2.14 etcd in k8s
---
- etcd is a cluster datastore for:
    - nodes
    - podes
    - configs
    - secrets
    - accounts
    - roles
    - bindings
    - others

- port: 2379

- list all keys stored in etcd db
    $ kubectl exec etcd-master -n kube-system etcd get / --prefix -keys-on

- https://gist.github.com/lalyos/aef94a4c23973eaee4a17bb26b6972a2


ETCDCTL_CACERT=/etc/kubernetes/pki/etcd/ca.crt \
    ETCDCTL_CERT=/etc/kubernetes/pki/etcd/peer.crt \
    ETCDCTL_KEY=/etc/kubernetes/pki/etcd/peer.key \
    ETCDCTL_API=3  \
    etcdctl \
      get \
      --keys-only \
      --prefix=true \
      "/registry/namespaces/"


etcdctl get --keys-only --prefix=true "/registry/" | less

- you must also specify path to certificate files 
    so that ETCDCTL can authenticate to the ETCD API Server
        --cacert /etc/kubernetes/pki/etcd/ca.crt     
        --cert /etc/kubernetes/pki/etcd/server.crt     
        --key /etc/kubernetes/pki/etcd/server.key


- k8s components
---
- kube-api-scheduler
    - communication between components
- kube-controller-manager
    - the brain
- kube-scheduler
    - decides which pod on which node
- kubelet
    - connection between nodes and master
- kube-proxy
    - networking


- pod = smallest object of k8s


- accessing labs
---
https://uklabs.kodekloud.com/courses/labs-certified-kubernetes-administrator-with-practice-tests/

https://kodekloud.com/topic/practice-test-replicasets-2/

q:
- how to check the number of containers in a pod?
    $ k get pods -o wide
        # ready column


2.29 replica sects 
---
- use cases
    - keeps pods always running
    - loadbalancing and scaling
    - to monitor already existing pods (and re-deploy failed ones if needed)

- replication controller -> older technology
- replicaSet -> same purpose as the replication controller

- main difference between replicaSets and replication controller is the "selector" field 
- selector matches the pod, e.g.
    selector:
        matchLabels:
        type: front-end

- use "replace" command to update the replicasets
    $ kubectl replace -f replicaset-definition.yaml
        - what about "apply"???

- scale
$ kubectl scale -replicas=6 -f replicaset-definition

$ kubectl edit replicaset ...

commands:
    $ kubectl edit replicaset ...
    $ kubectl scale -replicas=6 -f replicaset-definition
    $ kubectl replace -f replicaset-definition.yaml
    $ kubectl explain replicaset
        # gives the kind & version



2.32 deployments
---
- supports rolling updates
    - different versions of app

- pod < replicaSet < deployment

- yaml similar to replicaSet ("kind=Deployment" is the only difference to rs)



2.36 services
---
- can span accros more nodes in the cluster

- nodeport service
    - nodePort : Port : targetPort
    - NoPeWeB = NodePort is used for Web Apps/containers

- clusterip service
    - CLuPi DaBar = clusterIp is used for e.g. database (as a backEnd ip aggregator)

- loadbalancer
    - on the cloud platform that supports LoadBalancer type
    - instead of NodePort

- a difference between "expose" and "create service"
    - https://stackoverflow.com/questions/59397542/kubernetes-create-service-vs-expose-deployment
    - create service
        $ kubectl create service nodeport demo --tcp=8080:80 --node-port=31888
        - can set nodeport, port and target port
    - expose
        $ kubectl expose deployment demo --name=demo --type=NodePort --port=8080 --target-port=80
        - node port must be set afterwards (kubectl edit)
    - create service doesn't have the "set selector"
        $ kubectl set selector service demo myapp=hello
        - service to work with a deployment with pods labeled myapp: hello
            - must be set afterwards

- in short 
    - expose no NodePort (eno nodeport)
    - create service no label (kresxe no label)

- when creating a service from an existing object, a suggestion is to use expose
    - kubectl expose deployment nginx-deployment --type=NodePort --port=80 --target-port=80
        - if nodePort important, then edit the service (yaml definition file) and set the nodePort
        - nodePort: 30080

- there is a open task for setting labels when create service!
    - https://github.com/kubernetes/kubernetes/issues/46191    



2.41 namespaces
---
- permanently set the "dev" namespace
    $ kubectl config set-context $(kubectl config current-context) --namespace=dev



2.44 imperative vs declerative
---
- commands used for manipulating objects in k8s

- imperative approach example
    - create yaml object (yaml file)
    - edit the yaml file, when needed
    - replace (update) the object
        $ kubectl replace -f nginx.yaml
        -  fails if the object doesn;t exist
    - completly delete and replace the object: --force
        $ kubectl replace --force -f nginx.yaml

- declarative example
    $ kubectl apply -f nginx.yaml
    $ kubectl apply -f path-to/dir-with/object-files













































https://www.udemy.com/course/certified-kubernetes-administrator-with-practice-tests/learn/lecture/14295508#questions/19114274
https://www.udemy.com/course/certified-kubernetes-administrator-with-practice-tests/learn/lecture/14298422#learning-tools
https://www.udemy.com/course/certified-kubernetes-administrator-with-practice-tests/learn/lecture/37105770#overview














