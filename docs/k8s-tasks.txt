# https://kubernetes.io/docs/tasks/
---
# this one next: https://leetcode.com/problemset/
#


--- get a commit or two
--

- all k8s issues:
    - https://github.com/kubernetes/kubernetes/issues

- there is a open task for setting labels when create service!
    - https://github.com/kubernetes/kubernetes/issues/46191    

- no daemonset/replicaset create command
    - instead "k create deployment" is used

- contributing, a guide
    - https://github.com/kubernetes/community/tree/master/contributors/guide

--
--- get a commit or two


- task: install v1.27

- task: upgrade cluster to 1.28.4
    - https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/

- task: upgrade linux nodes (+ drain the node)
    - https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/upgrading-linux-nodes/

-  a trick to expose a service when creating the pod, at the same time, one-liner
    $ kubectl run httpd --image=httpd:alpine --port=80 --expose=true

- taint the node
    $ kubectl taint nodes node-name key=value:taint-effect

- label the node, then find it
    $ kubectl get pods --selector app=App1

- backup etcd

- deployments rollback / rolling update

- is killed deployment automatically brought back online?

- practice tests <= 2.30

- a difference between ReplicaSet and DaemonSet?

- what is fluentd?

- kubectl quick reference (e.g. kubectl autocomplete)
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/

- for vim easier editing
    set number
    set tabstop=2
    set expandtab
    set shiftwidth=2

- todo
    - 78. Practice Test - Multiple Schedulers
        - and above (< 78.)

- vi small tutor
    - https://docs.oracle.com/cd/E19455-01/806-2902/6jc3b36e2/index.html

- what-you-can-t-do-with-network-policies-at-least-not-yet
    - https://kubernetes.io/docs/concepts/services-networking/network-policies/#what-you-can-t-do-with-network-policies-at-least-not-yet


Google: “k8s certification weekends”
---
    https://www.reddit.com/r/kubernetes/comments/mfgln2/how_long_to_go_from_zero_experience_cka/
    
    https://support.kodekloud.com/preparing-for-the-kubernetes-certifications-cka-ckad

    https://www.zhaohuabing.com/post/2022-02-08-how-to-prepare-cka-en/

    
- deploy some other nw solution than weave
    - 217. Practice Test - Deploy Network Solution
    - take flannel e.g.
 
- continue practice tests
    - docker-registry was the last one
    - 167. Practice Test Service Accounts
        - go up from there
 
- use etcd as dns serv?
    - use redis?
    - implement as a go project

- configure tls bootstrap of the node
    - 275. More Certification Tips!

- how to bookmark links for the exam?
    - everybody says "bookmark links"

- easier way to create a service is to use "expose"
    - k expose deploy ... --type=NodePort ..
    - nodeport will have to be added with "k edit"

- what is downwardAPI?

- kubectl autocomplete 
    - https://kubernetes.io/pt-br/docs/reference/kubectl/cheatsheet/


- check container logs
    $ crictl ls
    $ crictl ps -a
    $ crictl logs 78e9e9652b8d7

- next to-do
    - 246. Practice Test - Deploy a Kubernetes Cluster using Kubeadm

- still not done???
    - 258. Practice Test - Worker Node Failure
    - https://kodekloud.com/topic/practice-test-cka-ingress-networking-1-2/
    - or covered already by ingress???

- check the lin version
    $ cat /etc/os-release

- host serviceName
    - how does this resolve a service dns?
    - from pod
        $ host myservice.namespace.svc.cluster.local    # same ns
        $ host myservice                                # diff ns

- pv and pvc
    - how to read from pvc?
    - like you would read from hostPath e.g.

- how can a docker container check if it has a capability?
    - https://stackoverflow.com/questions/46702043/how-can-a-docker-container-check-if-it-has-a-capability
    $ capsh --print | grep admin

- downward api
    - what is it

- check user auth, roles, rolebindings
    $ k auth can-i create deployment --as dev-user -n blue
    $ k auth can-i get pod/dark-blue-app --as dev-user -n blue
    $ k --as dev-user create deployment nginx --image=nginx
    $ k --as dev-user get pod/dark-blue-app -n blue


- check flux
    - https://fluxcd.io/


- after etcd restore, if external etcd service
    $ chown -R etcd /var/lib/etcd-data-new
    $ systemctl daemon-reload
    $ systemctl restart etcd.service

- set the namespace for the current context
    $ k config set-context --current --namespace elastic-stack

- play around with
    - Print the names of all deployments in the admin2406 namespace in the following format:
        - DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
        - kubectl -n admin2406 get deployment -o custom-columns=

    - The container should mount a read-only secret volume called 
        secret-volume at the path /etc/secret-volume. The secret 
        being mounted has already been created for you and is 
        called dotfile-secret.


- simulation of the exam environment
    - https://killercoda.com/kimwuestkamp/scenario/cks-cka-ckad-remote-desktop


- https://github.com/kodekloudhub/community-faq/blob/main/docs/jsonpath.md


- json path
    - https://github.com/kodekloudhub/community-faq/blob/main/docs/jsonpath.md


- custom columns
    - kubectl get pods -o custom-columns=POD_NAME:.metadata.name


- read doku
    - https://kubernetes.io/docs/concepts/storage/volumes/


- killercoda remote env test (20hours)
    - https://killercoda.com/kimwuestkamp/scenario/cks-cka-ckad-remote-desktop


- real Q
    - https://www.youtube.com/watch?v=o_7jlMBHFFA


- tasks:
    - install cluster
        - The GIT Repo for this tutorial can be found here: https://github.com/mmumshad/kubernetes-the-hard-way
    - upgrade cluster
    - backup etcd
    - volume mounts/secrets/configs
- practice again
    - create cluster (kubectl)
    - 167. Practice Test Service Accounts
    - 164. Practice Test - Cluster Roles and Role Bindings
    - 161. Practice Test - RBAC
    - token & sa
        - create web page
    - ingress
    - https://k21academy.com/docker-kubernetes/cka-ckad-exam-questions-answers/
    - playground for etcdctl
        - https://www.udemy.com/course/certified-kubernetes-administrator-with-practice-tests/learn/lecture/14298854#overview

- game of pods
    - https://kodekloud.com/topic/lab-kubernetes-challenge-1/
    - the solution
        - https://github.com/kodekloudhub/kubernetes-challenges

- tmux
    - https://superuser.com/questions/209437/how-do-i-scroll-in-tmux

- continue with this and above
    - lightning lab

- Print the names of all deployments in the admin2406 namespace in the following format:
    - DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
k get deployments.apps -n admin2406 -o custom-columns=DEPLOYMENT:.metadata.name,CONTAINER_IMAGE:.spec.template.spec.containers[0].image,READY_REPLICAS:status.readyReplicas,NAMESPACE:.metadata.namespace --sort-by=.metadata.name > /opt/admin2406_data

- k set image deployment/nginx-deploy nginx=nginx:1.17 --record
    - --record is deprecated
- k rollout history deployment/nginx-deploy

- use dot-secret
    - https://kubernetes.io/docs/concepts/configuration/secret/#use-case-dotfiles-in-a-secret-volume

- expose deployment as nodeport
    - which port cannot be exposed?

- Task
    - Expose the hr-web-app as service hr-web-app-service 
        application on port 30082 on the nodes on the cluster.
    - The web application listens on port 8080.
    - solution 
        $ kubectl expose deployment hr-web-app --type=NodePort --port=8080 --name=hr-web-app-service --dry-run=client -o yaml > hr-web-app-service.yaml

- task
    Create a new user called john. Grant him access to the cluster. John should have permission to create, list, get, update and delete pods in the development namespace . The private key exists in the location: /root/CKA/john.key and csr at /root/CKA/john.csr.
    Important Note: As of kubernetes 1.19, the CertificateSigningRequest object expects a signerName.
    Please refer the documentation to see an example. The documentation tab is available at the top right of terminal.

- solution
    Solution manifest file to create a CSR as follows:

    ---
    apiVersion: certificates.k8s.io/v1
    kind: CertificateSigningRequest
    metadata:
    name: john-developer
    spec:
    signerName: kubernetes.io/kube-apiserver-client
    request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZEQ0NBVHdDQVFBd0R6RU5NQXNHQTFVRUF3d0VhbTlvYmpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUt2Um1tQ0h2ZjBrTHNldlF3aWVKSzcrVVdRck04ZGtkdzkyYUJTdG1uUVNhMGFPCjV3c3cwbVZyNkNjcEJFRmVreHk5NUVydkgyTHhqQTNiSHVsTVVub2ZkUU9rbjYra1NNY2o3TzdWYlBld2k2OEIKa3JoM2prRFNuZGFvV1NPWXBKOFg1WUZ5c2ZvNUpxby82YU92czFGcEc3bm5SMG1JYWpySTlNVVFEdTVncGw4bgpjakY0TG4vQ3NEb3o3QXNadEgwcVpwc0dXYVpURTBKOWNrQmswZWhiV2tMeDJUK3pEYzlmaDVIMjZsSE4zbHM4CktiSlRuSnY3WDFsNndCeTN5WUFUSXRNclpUR28wZ2c1QS9uREZ4SXdHcXNlMTdLZDRaa1k3RDJIZ3R4UytkMEMKMTNBeHNVdzQyWVZ6ZzhkYXJzVGRMZzcxQ2NaanRxdS9YSmlyQmxVQ0F3RUFBYUFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1VKTnNMelBKczB2czlGTTVpUzJ0akMyaVYvdXptcmwxTGNUTStsbXpSODNsS09uL0NoMTZlClNLNHplRlFtbGF0c0hCOGZBU2ZhQnRaOUJ2UnVlMUZnbHk1b2VuTk5LaW9FMnc3TUx1a0oyODBWRWFxUjN2SSsKNzRiNnduNkhYclJsYVhaM25VMTFQVTlsT3RBSGxQeDNYVWpCVk5QaGhlUlBmR3p3TTRselZuQW5mNm96bEtxSgpvT3RORStlZ2FYWDdvc3BvZmdWZWVqc25Yd0RjZ05pSFFTbDgzSkljUCtjOVBHMDJtNyt0NmpJU3VoRllTVjZtCmlqblNucHBKZWhFUGxPMkFNcmJzU0VpaFB1N294Wm9iZDFtdWF4bWtVa0NoSzZLeGV0RjVEdWhRMi80NEMvSDIKOWk1bnpMMlRST3RndGRJZjAveUF5N05COHlOY3FPR0QKLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
    usages:
    - digital signature
    - key encipherment
    - client auth

-   To approve this certificate, run: kubectl certificate approve john-developer
    Next, create a role developer and rolebinding developer-role-binding, run the command:
    $ kubectl create role developer --resource=pods --verb=create,list,get,update,delete --namespace=development
    $ kubectl create rolebinding developer-role-binding --role=developer --user=john --namespace=development
    To verify the permission from kubectl utility tool:
    $ kubectl auth can-i update pods --as=john --namespace=development

- kubectl cheat sheet
    - autocompletion
    - jsonpath
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/

- DNS for Services and Pods
    - https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/

- csr
    - https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/#normal-user

- bound cluster role and service account
    $ k create clusterrolebinding pvviewer-role-bind --clusterrole=pvviewer --serviceaccount=default:pvviewer
    $ k describe clusterrolebinding pvviewer-role-bind

- kube-controller-manager ::
    --cluster-cidr=10.244.0.0/16
    --service-cluster-ip-range=10.96.0.0/12

$ k get nodes -o json | jq | grep -i internal -B 100
    - print 100 lines before grep
$ $ k get nodes -o json | jq -c 'paths' | grep type

- run test container for sh nad curl
    $ k run curl --image=alpine/curl --rm -it -- sh
        $ curl np-test-service

- show labels for pods
    $ k get pods --show-labels

- run different kube config
    $ k get nodes --kubeconfig /root/CKA/super.kubeconfig
    - should give the error

- ultimate certified kubernetes administrator mock exam series
    @ kodekloud
    - search
    - pay???

- kubectl commands
    - exec
    - attach (on a running container)

- todo
    1] learn
        + dns: pod,svc
        + ingress rules
        - csr -> user creation
        - jsonpath
        - roles, role bindings, non/namespaced resources = clusterroles, crb
        - etcd backup / rollout
        - storage & volumes
    2] kodekloud nr. 3
    3] learn
        - deploy stuff locally @ vagrant
        - game of pods
    4] deploy a webapp
        - flask
        - mysql

- next
    - https://kodekloud.com/topic/lab-cka-mock-exam-1/

- curl alpine
    $ k run curl --image=alpine/curl --rm -it -- sh
    $ k delete pod curly --grace-period=0
    $ kubectl delete deployment <deployment-name> --grace-period=0

- sidecar
    - elastic logger
    - name: sidecar
        image: busybox:1.28
        args: [/bin/sh, -c, 'tail -f  /var/log/elastic-app.log']
        volumeMounts:
        - name: varlog
        mountPath: /var/log



